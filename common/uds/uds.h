/**
 * @file uds.h
 * @author Eileen Yoon (eyn@purdue.edu)
 * @brief  Unified Diagnostics Services (UDS)
 * @version 0.1
 * @date 2024-12-18
 *
 * @copyright Copyright (c) 2024
 *
 */

#ifndef __COMMON_UDS_H__
#define __COMMON_UDS_H__

#include <assert.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#if defined(STM32F407xx)
#include "stm32f4xx.h"
#include "common/phal_F4_F7/gpio/gpio.h"
#elif defined(STM32F732xx)
#include "stm32f7xx.h"
#include "common/phal_F4_F7/gpio/gpio.h"
#else
#error "Unsupported MCU arch"
#endif

/* CAN Message structure for UDS VAR */
typedef struct {
    uint8_t  cmd;   // UDS command e.g. UDS_CMD_VAR_READ, UDS_CMD_VAR_WRITE
    uint8_t  id;    // Variable ID in table
    uint32_t value; // Value to read/write
    uint16_t pad;   // Padding (reserved)
} __attribute__((__packed__)) uds_variable_msg_t;
static_assert(sizeof(uds_variable_msg_t) == sizeof(uint64_t)); // 64 bits CAN

/* CAN Message structure for UDS PIN */
typedef struct {
    uint8_t  cmd;   // UDS command e.g. UDS_CMD_PIN_READ
    uint8_t  bank;  // GPIO bank to read
    uint8_t  pin;   // GPIO pin to read
    uint8_t value;  // Value to read/write
    uint32_t pad;   // Padding (reserved)
} __attribute__((__packed__)) uds_pin_msg_t;
static_assert(sizeof(uds_pin_msg_t) == sizeof(uint64_t)); // 64 bits CAN

/* CAN Message structure for UDS PIN */
typedef struct {
    uint8_t  cmd;   // UDS command e.g. UDS_CMD_PIN_READ
    uint16_t x;
    uint16_t y;
    uint16_t z;
    uint8_t pad;   // Padding (reserved)
} __attribute__((__packed__)) uds_test_msg_t;
static_assert(sizeof(uds_test_msg_t) == sizeof(uint64_t)); // 64 bits CAN

/* Autogenerated struct filled out by the generator according to the JSON */
typedef struct {
    uint8_t  id;    // Autogenerated variable ID
    uint8_t  perm;  // Read/write permission flag
    uint32_t addr;  // Address of the variable to access
    uint32_t len;   // Size of variable in bits
    // uint32_t (*read_fn)(void);
    // void (*write_fn)(uint32_t val);
} uds_variable_t;

bool udsInitBase(uds_variable_t *uds_tracked_vars_, uint32_t uds_num_vars_);
void uds_handle_command(uint8_t cmd, uint64_t data);

/* Callbacks defined under each module */
extern void udsFrameSend(uint64_t data);
extern void uds_handle_sub_command_callback(uint8_t cmd, uint64_t data);

#define UDS_VAR_READ_FLAG   (1 << 0)
#define UDS_VAR_WRITE_FLAG  (1 << 1)

/* UDS CMD defines */
/* 0x00 - 0x0f - Sys/Bootloader (RESERVED) */
/* 0x10 - 0x1f - Daqapp var read/write (RESERVED) */

#define UDS_CMD_SYS_RST       0x05
#define UDS_CMD_SYS_TEST      0x06

#define UDS_CMD_VAR_READ      0x10
#define UDS_CMD_VAR_WRITE     0x11
#define UDS_CMD_PIN_READ      0x12

#define UDS_CMD_SYS_MAX       0x1f

#endif // __COMMON_UDS_H__
